<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Expense Tracker</title>
    <link rel="stylesheet" href="/main.css">
</head>
<body class="bg-gradient-to-br from-gray-100 to-blue-100 min-h-screen flex items-center justify-center p-6">
<div id="notification-container"></div>
<div class="w-full max-w-4xl bg-white shadow-lg rounded-lg overflow-hidden">
    <!-- Header -->
    <div class="bg-blue-500 text-white p-6 text-center">
        <h1 class="text-3xl font-bold">Expense Tracker</h1>
        <p class="text-sm mt-2">A simple expense tracker application made using Node.js, Express.js, and EJS.</p>
    </div>

    <div class="bg-gray-100 p-4 rounded shadow-lg mb-6 text-center">
        <h2 class="text-xl font-semibold">App Information</h2>
        <ul class="mt-2">
            <li><strong>Node.js Version:</strong> <%= appInfo.nodeVersion %></li>
            <li><strong>Express Version:</strong> <%= appInfo.expressVersion %></li>
            <li><strong>Operating System:</strong> <%= appInfo.osName %></li>
            <li><strong>App Uptime:</strong> <%= appInfo.uptime %></li>
        </ul>
    </div>

    <div class="p-6">
        <!-- Expenses Table -->
        <div class="mb-8">
            <div id="expenses-list">
                <div class="overflow-x-auto">
                    <table class="table-auto w-full border-collapse bg-white rounded-lg shadow-md">
                        <thead>
                        <tr class="bg-blue-100 text-gray-700">
                            <th class="px-4 py-3 text-left text-sm font-medium">Title</th>
                            <th class="px-4 py-3 text-left text-sm font-medium">Amount</th>
                            <th class="px-4 py-3 text-left text-sm font-medium">Category</th>
                            <th class="px-4 py-3 text-center text-sm font-medium">Actions</th>
                        </tr>
                        </thead>
                        <tbody id="expense-rows"></tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Add Expense Form -->
        <div id="add-expense-form-container" class="bg-gray-100 p-6 rounded-lg shadow-md">
            <h2 class="text-xl font-semibold text-center text-gray-700 mb-6">Add New Expense</h2>
            <form id="add-expense-form" class="space-y-4">
                <div>
                    <label for="title" class="block text-sm font-medium text-gray-600">Title</label>
                    <input type="text" id="title" name="title"
                           class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400"
                           placeholder="E.g., Grocery shopping" required>
                </div>
                <div>
                    <label for="amount" class="block text-sm font-medium text-gray-600">Amount</label>
                    <input type="number" id="amount" name="amount"
                           class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400"
                           placeholder="E.g., 50" required>
                </div>
                <div>
                    <label for="category" class="block text-sm font-medium text-gray-600">Category</label>
                    <input type="text" id="category" name="category"
                           class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400"
                           placeholder="E.g., Food, Travel" required>
                </div>
                <button type="submit"
                        class="w-full bg-blue-500 text-white font-semibold py-2 rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400">
                    Add Expense
                </button>
            </form>
        </div>

        <!-- Edit Expense Form -->
        <div id="edit-expense-form-container" class="bg-gray-100 p-6 rounded-lg shadow-md hidden">
            <h2 class="text-xl font-semibold text-center text-gray-700 mb-6">Edit Expense</h2>
            <form id="edit-expense-form" class="space-y-4">
                <input type="hidden" id="edit-id" name="id">
                <div>
                    <label for="edit-title" class="block text-sm font-medium text-gray-600">Title</label>
                    <input type="text" id="edit-title" name="title"
                           class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400"
                           required>
                </div>
                <div>
                    <label for="edit-amount" class="block text-sm font-medium text-gray-600">Amount</label>
                    <input type="number" id="edit-amount" name="amount"
                           class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400"
                           required>
                </div>
                <div>
                    <label for="edit-category" class="block text-sm font-medium text-gray-600">Category</label>
                    <input type="text" id="edit-category" name="category"
                           class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400"
                           required>
                </div>
                <button type="submit"
                        class="w-full bg-yellow-500 text-white font-semibold py-2 rounded-lg hover:bg-yellow-600 focus:outline-none focus:ring-2 focus:ring-yellow-400">
                    Update Expense
                </button>
                <button type="button" id="cancel-edit"
                        class="w-full bg-gray-300 text-gray-700 font-semibold py-2 rounded-lg hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-400 mt-2">
                    Cancel
                </button>
            </form>
        </div>
    </div>
</div>

<script>
    function showNotification(message, type = 'success', duration = 3000) {
        const container = document.getElementById('notification-container');
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        container.appendChild(notification);
        setTimeout(() => notification.remove(), duration);
    }

    async function fetchAndUpdateExpenses() {
        const response = await fetch('/api/expenses');
        const expenses = await response.json();
        const tableBody = document.getElementById('expense-rows');

        if (expenses.length === 0) {
            tableBody.innerHTML = `
                <tr>
                    <td class="px-4 py-3 text-center" colspan="4">No expenses found.</td>
                </tr>
            `;
            return;
        }

        tableBody.innerHTML = expenses.map(expense => `
            <tr data-id="${expense._id}" class="border-t hover:bg-blue-50 transition">
                <td class="px-4 py-3">${expense.title}</td>
                <td class="px-4 py-3 text-gray-600 font-semibold">$${expense.amount}</td>
                <td class="px-4 py-3">${expense.category}</td>
                <td class="px-4 py-3 text-center">
                    <button onclick="editExpense('${expense._id}', '${expense.title}', '${expense.amount}', '${expense.category}')"
                            class="bg-yellow-500 text-white px-3 py-1 rounded-full text-sm hover:bg-yellow-600 focus:outline-none focus:ring-2 focus:ring-yellow-400">
                        Edit
                    </button>
                    <button onclick="deleteExpense('${expense._id}')"
                            class="bg-red-500 text-white px-3 py-1 rounded-full text-sm hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-400">
                        Delete
                    </button>
                </td>
            </tr>
        `).join('');
    }

    // Add Expense Logic
    document.getElementById("add-expense-form").addEventListener("submit", async (event) => {
        event.preventDefault();
        const form = event.target;
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch('/api/expenses', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(data)
            });
            if (response.ok) {
                showNotification('Expense added successfully!');
                form.reset();
                await fetchAndUpdateExpenses();
            } else {
                const error = await response.json();
                showNotification(error.message || 'Failed to add expense', 'error');
            }
        } catch (error) {
            showNotification('An error occurred while adding the expense', 'error');
        }
    });

    // Edit Expense Logic
    function editExpense(id, title, amount, category) {
        document.getElementById('edit-expense-form-container').classList.remove('hidden');
        document.getElementById('add-expense-form-container').classList.add('hidden');
        document.getElementById('edit-id').value = id;
        document.getElementById('edit-title').value = title;
        document.getElementById('edit-amount').value = amount;
        document.getElementById('edit-category').value = category;
    }

    document.getElementById('edit-expense-form').addEventListener('submit', async (event) => {
        event.preventDefault();
        const form = event.target;
        const id = document.getElementById('edit-id').value;
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch(`/api/expenses/${id}`, {
                method: 'PUT',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(data)
            });
            if (response.ok) {
                showNotification('Expense updated successfully!');
                form.reset();
                await fetchAndUpdateExpenses();
                document.getElementById('edit-expense-form-container').classList.add('hidden');
                document.getElementById('add-expense-form-container').classList.remove('hidden');
            } else {
                const error = await response.json();
                showNotification(error.message || 'Failed to update expense', 'error');
            }
        } catch (error) {
            showNotification('An error occurred while updating the expense', 'error');
        }
    });

    document.getElementById('cancel-edit').addEventListener('click', () => {
        document.getElementById('edit-expense-form-container').classList.add('hidden');
        document.getElementById('add-expense-form-container').classList.remove('hidden');
    });

    // Delete Expense Logic
    async function deleteExpense(id) {
        if (!confirm('Are you sure you want to delete this expense?')) return;

        try {
            const response = await fetch(`/api/expenses/${id}`, {method: 'DELETE'});
            if (response.ok) {
                showNotification('Expense deleted successfully!');
                await fetchAndUpdateExpenses();
            } else {
                const error = await response.json();
                showNotification(error.message || 'Failed to delete expense', 'error');
            }
        } catch (error) {
            showNotification('An error occurred while deleting the expense', 'error');
        }
    }

    // Fetch and display expenses on page load
    fetchAndUpdateExpenses();
</script>
</body>
</html>
